/**
 * Linked List is a collection of data nodes. All methods here relate to how one
 * can manipulate those nodes.
 * 
 * @author Xavier
 * @version 02.09.17
 * 
 *          * I affirm that I have carried out the attached academic endeavors
 *          with full academic honesty, in accordance with the Union College
 *          Honor Code and the course syllabus.
 */
public class LinkedList {
	private int length; // number of nodes
	private ListNode firstNode; // pointer to first node

	public LinkedList() {
		length = 0;
		firstNode = null;
	}



	public void insertAt(int place, String toInsert) {
		ListNode newNode = new ListNode(toInsert);

		if (getLength() == 0) {
			firstNode = newNode;
		}

		else {
			ListNode n;
			n = firstNode;
			int index = 0;
			while (index != (this.getLength()-1) && index < (place - 1)) {
				n = n.next;
				index++;
			}
			if (index == this.getLength()) {
				
				n.next = newNode;
			} 
			else if(place<=0) {
				newNode.next=firstNode;
				firstNode=newNode;
			}
			
			
			else {

				newNode.next = n.next;
				n.next = newNode;
			}
		}
		length++;
	}
	
	
	
	public String removeAt(int place) {
		if(place<0 || place>=this.getLength()) 
			return null;
		
		ListNode n;
		n = firstNode;
		String toReturn;
		int index = 0;
		while (index != (this.getLength()-1) && index < (place - 1)) {
			n = n.next;
			index++;
		}
		
		toReturn = n.next.data;
		n.next=n.next.next;
		
		
		length--;
		return toReturn;
	}

	/**
	 * Removes the lists first node and returns the Data from the removed String
	 * 
	 * @return Data from the removed String
	 */
	public String removeHead() {
		if (getLength() == 0) {
			return null;
		} else {
			String tmpData = firstNode.data;
			firstNode = firstNode.next;
			length--;
			return tmpData;
		}
	}



	/**
	 * Turn entire chain into a string
	 * 
	 * @return return linked list as printable string of format
	 *         (string,\nstring,\nstring)
	 */
	public String toString() {
		String toReturn = "(";
		ListNode n;
		n = firstNode;
		while (n != null) {
			toReturn = toReturn + n; // call node's toString automatically
			n = n.next;
			if (n != null) {
				toReturn = toReturn + ", ";
			}
		}
		toReturn = toReturn + ")";
		return toReturn;
	}

	/**
	 * getter for number of nodes in the linked list
	 * 
	 * @return length of LL
	 */
	public int getLength() {
		return length;
	}
}