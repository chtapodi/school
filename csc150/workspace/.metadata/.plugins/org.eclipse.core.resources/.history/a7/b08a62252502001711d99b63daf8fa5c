/**
 * 
 */

/**
 * @author xavier
 * 
 */
public class BSTTesting {
	public static void main(String[] args) {

		Testing.setVerbose(true);
		Testing.startTests();

		//testSearch();
		//testFindParent();
		testRemove();
		
		Testing.finishTests();

	}

	private static void testSearch() {
		BinarySearchTree tree = fill();
		
		Testing.assertEquals("Exists", "AAA", tree.search("AAA").key);
		Testing.assertEquals("Exists", "BBB", tree.search("BBB").key);
		Testing.assertEquals("does not exist", null, tree.search("ZZZ"));
		Testing.assertEquals("does not exist", null, tree.search("Ayyyy"));
		Testing.assertEquals("does not exist", null, tree.search("CCCCC"));
	}

	private static void testFindParent() {
		BinarySearchTree tree = fill();
		
		Testing.assertEquals("Exists", "BBB", tree.findParent("CCC").key);
		Testing.assertEquals("Exists", "CCC", tree.findParent("DDD").key);
		Testing.assertEquals("Exists", "BBB", tree.findParent("AAA").key);
		Testing.assertEquals("Exists", "AAA", tree.findParent("BBA").key);
		Testing.assertEquals("Exists", "CCC", tree.findParent("CAA").key);
		Testing.assertEquals("Exists", "CAA", tree.findParent("CCB").key);
		
		Testing.assertEquals("Exists", null, tree.findParent("ZZ"));
		Testing.assertEquals("Exists", null, tree.findParent("CCCC"));
		
		
		
	}
	
	
	private static void testRemove() {
		BinarySearchTree tree = fill();
		System.out.println(tree.toString());
		
		tree.remove("CCB");
		Testing.assertEquals("After removal with no kids", "((  AAA (  BBA ))  BBB ((  CAA )  CCC (  DDD )))", tree.toString());
		
		tree.remove("AAA");
		Testing.assertEquals("After removal with no kids", "((  BBA )  BBB ((  CAA )  CCC (  DDD )))", tree.toString());
		
		tree.remove("CCC");
		Testing.assertEquals("After removal with no kids", "((  BBA )  BBB ((  CAA )  DDD ))", tree.toString());
		
		tree.insert("EEE", 12);
		tree.remove("CAA");
		Testing.assertEquals("After removal with no kids", "((  BBA )  BBB (  DDD (  EEE )))", tree.toString());

		tree.remove("BBB");
		Testing.assertEquals("After removal with no kids", "(  BBA  ( DDD  ( EEE )))", tree.toString());

		
		
	}
	
	private static BinarySearchTree fill() {
		BinarySearchTree tree = new BinarySearchTree<String>();
		tree.insert("BBB", 1);
		tree.insert("CCC", 4);
		tree.insert("DDD", 4);
		tree.insert("AAA", 4);
		tree.insert("BBA", 4);
		tree.insert("CAA", 4);
		tree.insert("CCB", 4);
		return tree;
		
	}

}
