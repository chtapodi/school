/**
 * This is the BST ADT. It should contain methods that allow it to insert new
 * nodes, delete nodes, search, etc. You'll be adding code to this class for
 * this lab.
 * 
 * 
 * 
 * @author Xavier
 * @version 03.02.17
 */
public class BinarySearchTree<E extends Comparable<E>> {
	private BSTNode<E> root;


	
	/**
	 * Default constructor for BST
	 */
	public BinarySearchTree() {
		root=null;
	}
	
	
//	public void remove(E toRemove) {
//		remove(root, toRemove);
//	}
//	
//	private BSTNode remove(BSTNode<E> node, E toRemove) {
//		
//		
//	}
	
	
	
	public BSTNode findParent(BSTNode node, E toRemove) {
		if (node == null) {
			return null;
		}

		if (node.lLink.key.compareTo(toRemove) == 0) {
			return node;
		} else {
			BSTNode left = search(node.lLink, toRemove);
			BSTNode right = search(node.rLink, toRemove);

			if (left != null) {
				return left;
			} else {
				return right;
			}
		}
	}
	
	
	
	private BSTNode findMin(BSTNode<E> start) {
		// To find the min, go left as far as possible.
		if (start.lLink == null) {
			return start;
		} else {
			return findMin(start.lLink);
		}
	}
	
	
	/**
	 * Inserts information into the tree
	 * @param newValue
	 */
	public void insert(E newValue, int pageNumber) {
		root = insert(root,newValue, pageNumber);
	}
	
	/**
	 * Inserts the given data into the tree
	 * 
	 * @param whatever you want to put in the tree
	 * @return The new tree with the inserted node
	 **/
	public BSTNode insert(BSTNode<E> node, E data, int pageNumber) {
		if (node == null) {
			return new BSTNode<E>(data, pageNumber);           
		} 
		else if ( data.compareTo(node.key) > 0 ) { 
			node.rLink = insert(node.rLink, data, pageNumber);
			return node;
		} 
		else if (data.compareTo(node.key)==0) {
			node.pageInsert(pageNumber);
			return root;
		}
		else {
			node.lLink = insert(node.lLink, data, pageNumber); 
			return node;   
		} 
	}

	
	
	
	/**
	 * Searches for a node with specific data and returns it. Returns null if
	 * its not found.
	 * 
	 * @param node
	 *            The node to start at (usually root)
	 * @param value
	 *            The data that you're looking for
	 * @return The node, or null
	 */
	private BSTNode<E> search(BSTNode<E> node, E value) {

		if (node == null) {
			return null;
		}

		if (node.key.compareTo(value) == 0) {
			return node;
		} else {
			BSTNode left = search(node.lLink, value);
			BSTNode right = search(node.rLink, value);

			if (left != null) {
				return left;
			} else {
				return right;
			}
		}
	}

	/**
	 * Searches for some data and returns its node, or null if the node is not
	 * found
	 * 
	 * @param data
	 *            Whatever you want to find
	 * @return The node, or null
	 */
	public BSTNode search(E data) {
		return search(root, data);
	}

	
	
	/**
	 * Counts how many nodes there are in the tree
	 * 
	 * @return Number of nodes in the tree
	 */
	public int getSize() {
		return getSize(root);
	}
	
	/**
	 * 
	 * @param N The node to start at, usually room
	 * @return The size of the tree
	 */
	private int getSize(BSTNode N) {
		if (N==null) {
			return 0;
		}
		else {
			return getSize(N.lLink) + getSize(N.rLink) + 1;
		}
	}

	
	
	/**
	 * A general toString method
	 * 
	 * @return a string off the entire tree including parens to denote children
	 */
	public String toString() {
		return stringNodes(root);
	}

	/**
	 * Returns a string off the entire tree including parens to denote children
	 * 
	 * @param N
	 *            the node to start at (usually root)
	 * @return The string version of all the nodes.
	 */
	private String stringNodes(BSTNode<E> N) {
		String toReturn = "";
		if (N != null) {
			toReturn += "(";
			toReturn += stringNodes(N.lLink);
			toReturn += "  " + N.key + " ";
			toReturn += stringNodes(N.rLink);
			toReturn += ")";

		}
		return toReturn;
	}
	
	
}